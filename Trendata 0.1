import java.util.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;


public class trendata {

    public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub
        String fname, mname,lname;
        int age,tenure;
        double salary=0;
        int pr;

//        Scanner scan=new Scanner(System.in);
//        System.out.println("Enter the First Name of the Employee: ");
//        fname=scan.nextLine();
//        System.out.println("Enter the Middle Name of the Employee: ");
//        mname=scan.nextLine();
//        System.out.println("Enter the Last Name of the Employee: ");
//        lname=scan.nextLine();
//        System.out.println("Enter the age of the Employee: ");
//        age=scan.nextInt();
//        System.out.println("Enter the Tenure of the Employee: ");
//        tenure=scan.nextInt();
//        System.out.println("Enter the Salary of the Employee: ");
//        salary=scan.nextDouble();
//        System.out.println("Enter the changes in the Performance rating of the Employee (enter 1 for increase, 0 for stay, -1 for decrease): ");
//        pr=scan.nextInt();
//        Ai_algorithm ai= new Ai_algorithm(fname,mname,lname,age,tenure,salary);
        
//        System.out.println("The Employee "+ai.getFirst()+" "+ai.getMiddle()+" "+ai.getLast()+" has made a score of "+ai.compute());
        PrintWriter pw = new PrintWriter(new File("Test.csv"));
        BufferedReader reader = new BufferedReader(new FileReader("Nurses.csv"));
        String line = "";
        String [][] employee = new String[10000][10];// Reader 2-D Array.
        List<String> lines = new ArrayList<>();

        double [] score= new double[10000];
//        int i=10;
        int y=0;
        while((line=reader.readLine())!=null){
//            System.out.println(line);
             lines.add(line);
//             System.out.println(line);
            employee[y] =line.trim().split(",");
//            System.out.println(employee[y][8]);
            y++;
        }//parse lines into tokens into 2d array
        List<Double> Ary_age= new ArrayList<>();
        List<Double> Ary_tenure=new ArrayList<>();
        List<Double> Ary_salary=new ArrayList<>();
        
        demo[] dAge=analyze(Ary_age, employee,8);
        demo[] dTenure=analyze(Ary_tenure, employee,4);
        demo[] dSalary=analyze(Ary_salary, employee,3);
        double points=0;
        Ai_algorithm a = new Ai_algorithm();
        int ag=0,te=0,sa=0;
        for(int h=1; h<10000; h++)
        {
        	if(employee[h][0]==null)
        	{
        		break;
        	}
        	for(int l=0;l<dAge.length;l++)
        	{
        		if(dAge[l].inRange(Double.parseDouble(employee[h][8])))
        		{
        			ag=dAge[l].getRank();
        		}
        	}
        	for(int o=0;o<dTenure.length;o++) {
        		if(dTenure[o].inRange(Double.parseDouble(employee[h][4])))
        		{
        			te=dTenure[o].getRank();
        		}
        	}
        	for(int q=0;q<dSalary.length;q++) {
        		if(dSalary[q].inRange(Double.parseDouble(employee[h][3])))
        		{
        			sa=dSalary[q].getRank();
        		}
        	}
//        	System.out.println(ag+" "+te+" "+sa);
        	score[h]=a.compute(ag,te,sa);
        }

        
        
//             for(int j=1;j<3000;j++)
//             {
//                 Ai_algorithm a = new Ai_algorithm(employee[j][0],employee[j][1],employee[j][2],employee[j][8],employee[j][4],employee[j][3]);
//                 score[j]=a.compute();
                
//             }

       for(int z=0;z<lines.size();z++)
       {
           lines.set(z, lines.get(z)+","+score[z]);
       }
       
       int t=0;
       while(t<lines.size())
       {
           pw.append(lines.get(t));
           pw.append(System.lineSeparator());
//           System.out.println(lines.get(t));
           t++;
       }
       
       pw.flush();
       pw.close();
       reader.close();
    }
    public static demo[] analyze(List<Double> list, String[][] e, int i)//i for index of column, whether it is age, tenure, or salary
    {

    	
        for(int x=1; x<10000; x++)
        {
            if(e[x][i]==null)//8 is age 4 is tenure 3 is salary
            {
                break;
            }
            list.add(Double.parseDouble(e[x][i]));              
        }
        Collections.sort(list);
        
        //break list up into demos
//        demo[] demoList = new demo[20]; 20 hard coded categories for algorithm 0.1
        demo[] demoList = new demo[8];
        for (int f = 0; f < demoList.length; f++) {
        	demoList[f] = new demo();
        }
        double mid=find_Average(list);
        List<Double> high = new ArrayList<>(), low=new ArrayList<>(), lowL=new ArrayList<>(), lowH=new ArrayList<>(), 
        		highL=new ArrayList<>(),highH=new ArrayList<>(), lowLL=new ArrayList<>(), lowLH=new ArrayList<>(),
        		lowHL=new ArrayList<>(), lowHH=new ArrayList<>(), highLL=new ArrayList<>(), highLH=new ArrayList<>(),
        		highHL=new ArrayList<>(),highHH=new ArrayList<>();
        for(int p=0; p<list.size();p++)
        {
        	if(list.get(p)<=mid)
        	{
        		low.add(list.get(p));
        	}
        	else
        		high.add(list.get(p));
        }
        double lowM=find_Average(low), highM=find_Average(high);

        	
        	
        	
        	for(int p=0; p<low.size();p++)
            {
            	if(low.get(p)<=lowM)
            	{
            		lowL.add(low.get(p));
            	}
            	else
            		lowH.add(low.get(p));
            }
        	for(int p=0; p<high.size();p++)
            {
            	if(high.get(p)<=highM)
            	{
            		highL.add(high.get(p));
            	}
            	else
            		highH.add(high.get(p));
            }
        	double lowLM=find_Average(lowL), lowHM=find_Average(lowH),highLM=find_Average(highL),highHM=find_Average(highH);
        	System.out.println(lowM+" "+highM+ " "+ mid);
        	demoList[0].setMin(0);
        	demoList[0].setMax(lowLM);
        	demoList[1].setMin(lowLM+1);
        	demoList[1].setMax(lowM);
        	demoList[2].setMin(lowM+1);
        	demoList[2].setMax(lowHM);
        	demoList[3].setMin(lowHM+1);
        	demoList[3].setMax(mid);
        	demoList[4].setMin(mid+1);
        	demoList[4].setMax(highLM);
        	demoList[5].setMin(highLM+1);
        	demoList[5].setMax(highM);
        	demoList[6].setMin(highM+1);
        	demoList[6].setMax(highHM);
        	demoList[7].setMin(highHM+1);
        	demoList[7].setMax(list.get(list.size()-1));

        	for(int p=0; p<lowL.size();p++)
            {
            	if(lowL.get(p)<=lowLM)
            	{
            		lowLL.add(lowL.get(p));
            	}
            	else
            		lowLH.add(lowL.get(p));
            }

        	for(int p=0; p<lowH.size();p++)
            {
            	if(lowH.get(p)<=lowHM)
            	{
            		lowHL.add(lowH.get(p));
            	}
            	else
            		lowHH.add(lowH.get(p));
            }

        	for(int p=0; p<highL.size();p++)
            {
            	if(highL.get(p)<=highLM)
            	{
            		highLL.add(highL.get(p));
            	}
            	else
            		highLH.add(highL.get(p));
            }

        	for(int p=0; p<highH.size();p++)
            {
            	if(highH.get(p)<=highHM)
            	{
            		highHL.add(highH.get(p));
            	}
            	else
            		highHH.add(highH.get(p));
            }
        demoList[0].setPopulation(lowLL.size());
        demoList[1].setPopulation(lowLH.size());
        demoList[2].setPopulation(lowHL.size());
        demoList[3].setPopulation(lowHH.size());
        demoList[4].setPopulation(highLL.size());
        demoList[5].setPopulation(highLH.size());
        demoList[6].setPopulation(highHL.size());
        demoList[7].setPopulation(highHH.size());
        //        if(i==4)//the first demo is set.
//    	{
//    		demoList[0].setMax(500);
//    		demoList[0].setMin(0);
//    	}
//        if(i==8)
//    	{
//    		demoList[0].setMax(25);
//    		demoList[0].setMin(0);    		
//    	}
//        if(i==3)
//    	{
//    		demoList[0].setMax(30000);
//   			demoList[0].setMin(0);
//    	}
//        int counter=0;//counter is where we start.
//        for(int ind=0;ind<list.size();ind++)
//        {
//        	if(i==4)
//        	{
//        		if(list.get(ind)<500)
//        		counter++;
//        	}
//        	if(i==8)
//        	{
//        		if(list.get(ind)<25)
//        			counter++;
//        	}
//        	if(i==3)
//        	{
//        		if(list.get(ind)<30000)
//        		counter++;
//        	}
//        }
//        int t = (list.size()-counter)/19;
//        for (int j = 1; j < 20; j++) {        	
//        	demoList[j].setMin(counter+(j-1)*t);
//        	
//        	demoList[j].setMax(counter+j*t);
//        	System.out.print(demoList[j].getMax()+" "+demoList[j].getMin()+" ");
//        }
        
        //add population to each demo
//        int co=0;
//        for (demo d : demoList) {
////        	for (int a = 0; a < list.size(); a++) {
////        		if (d.inRange(list.get(a))){
////        			d.pop(); //add a value for each
////        		}
//        	d.setPopulation(t);
//        		
//        	}       
        
        //find terminated ratios
        for (int k = 1; k <demoList.length; k++) {
//        	List<Double> term_list = find_Terminated(e, i, t*k, t*(k+1));
        	if (demoList[k].getPop() != 0) {
//        		System.out.println(demoList[k].getPop()+" "+demoList[k].getMax()+" "+demoList[k].getMin());
        		demoList[k].setPercent((double)(find_Terminated(e, i, demoList[k].getMin(), demoList[k].getMax()))/(double)(demoList[k].getPop()));
//        		System.out.println(demoList[k].getPercent()+" "+find_Terminated(e, i, demoList[k].getMin(), demoList[k].getMax())+" "+demoList[k].getPop());
        	}
        	else {
        		demoList[k].setPercent(0);
        	}
        }
        List<Double> demoL=new ArrayList<>();
        for (demo m:demoList)
        {
        	demoL.add(m.getPercent());
        }
        Collections.sort(demoL,Collections.reverseOrder());
        for(int c=0;c<demoList.length;c++)
        {
        	for(int d=0;d<demoList.length;d++)
        	{if(demoList[d].getPercent()==demoL.get(c))
        		demoList[d].setRank(c+1);
        			}
        }
        return demoList;
        //return list;
    }
    public static int find_Terminated(String[][] em, int x,double min, double max)//x is the index of column
    {
    	int count=0;
    	for(int i=1;i<10000;i++){
    		if(em[i][x] == null)
    			break;
    		if(Integer.parseInt(em[i][9])==1 && Double.parseDouble(em[i][x])<=max && Double.parseDouble(em[i][x])>min)
    		{
//    			temp.add(Double.parseDouble(em[i][x]));
    			count++;
    		}
    	}
    	return count;
    }
    public static double find_Average(List<Double> emp)
    {
    	double total=0;
    	for(int i=0; i<emp.size();i++)
    	{
    		total+=emp.get(i);
    	}
    	
    	return total/emp.size();
    }
}
